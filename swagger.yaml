openapi: 3.0.0
info:
  title: ApenMeet
  version: '1.0'
  description: "API endpoints to access the usage data generated by the ApenMeet's team."
servers:
  - url: http://localhost:3000/api
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Plan:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        description: { type: string }
        creatorId: { type: string }
        creatorUsername: { type: string }
        imageUrl: { type: string }
        location:
          type: object
          properties:
            address: { type: string }
            coordinates:
              type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
        tags:
          type: array
          items: { type: string }
        dateTime: { type: string, format: date-time }
        maxParticipants: { type: integer }
        participants:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              username: { type: string }
              joinedAt: { type: string, format: date-time }
        admins:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              username: { type: string }
        origin: { type: string }
        createdAt: { type: string, format: date-time }
        status: { type: string }
    PlanInput:
      type: object
      required: [title, description, location, dateTime, maxParticipants]
      properties:
        title: { type: string }
        description: { type: string }
        location:
          type: object
          properties:
            address: { type: string }
            coordinates:
              type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
        dateTime: { type: string, format: date-time }
        maxParticipants: { type: integer }
        tags:
          type: array
          items: { type: string }
    Message:
      type: object
      properties:
        _id: { type: string }
        content: { type: string }
        sender:
          type: object
          properties:
            _id: { type: string }
            username: { type: string }
        planId: { type: string }
        createdAt: { type: string, format: date-time }
    MessageInput:
      type: object
      required: [content, sender, planId]
      properties:
        content: { type: string }
        sender:
          type: object
          properties:
            _id: { type: string }
            username: { type: string }
        planId: { type: string }
    Review:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        rating: { type: number }
        comment: { type: string }
        createdAt: { type: string, format: date-time }
    ReviewInput:
      type: object
      required: [userId, rating]
      properties:
        userId: { type: string }
        rating: { type: number }
        comment: { type: string }
    User:
      type: object
      properties:
        _id: { type: string }
        username: { type: string }
        email: { type: string }
        bio: { type: string }
        location:
          type: object
          properties:
            city: { type: string }
            country: { type: string }
            coordinates:
              type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
            formattedAddress: { type: string }
            postalCode: { type: string }
            region: { type: string }
            timezone: { type: string }
        interests:
          type: array
          items: { type: string }
        profileImage: { type: string }
        rating: { type: number }
        isVerified: { type: boolean }
    UserUpdateInput:
      type: object
      properties:
        username: { type: string }
        email: { type: string }
        password: { type: string }
        bio: { type: string }
        location:
          type: object
          properties:
            city: { type: string }
            country: { type: string }
            coordinates:
              type: array
              items: { type: number }
              minItems: 2
              maxItems: 2
            formattedAddress: { type: string }
            postalCode: { type: string }
            region: { type: string }
            timezone: { type: string }
        interests:
          type: array
          items: { type: string }
        profileImage: { type: string, format: binary }
paths:
  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/login:
    post:
      summary: Login user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
        400:
          description: Email/username and password are required
        401:
          description: Invalid credentials
  /users/register:
    post:
      summary: Register user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                bio:
                  type: string
                interests:
                  type: string
      responses:
        201:
          description: User registered successfully
        400:
          description: Missing required fields
        409:
          description: Username or email already in use
  /users/token:
    post:
      summary: Get new access token from refresh token
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        200:
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        401:
          description: Token not provided
        403:
          description: Invalid token
  /users/me:
    get:
      summary: Get current user data
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User data
        401:
          description: Invalid or missing token
    patch:
      summary: Update current user data
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        200:
          description: User updated successfully
        401:
          description: Invalid or missing token
        404:
          description: User not found
  /users/logout:
    delete:
      summary: Logout user (delete refresh token)
      tags: [Users]
      responses:
        200:
          description: Logout successful
  /plans:
    get:
      summary: Get all plans
      tags: [Plans]
      responses:
        200:
          description: List of all plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
    post:
      summary: Create a new plan
      tags: [Plans]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
      responses:
        201:
          description: Plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Missing required fields
  /plans/user/{username}:
    get:
      summary: Get plans by username
      tags: [Plans]
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username
      responses:
        200:
          description: List of plans for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        404:
          description: User not found
  /plans/participating:
    get:
      summary: Get plans the current user is participating in
      tags: [Plans]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of participating plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        401:
          description: User not authenticated
  /plans/{id}:
    get:
      summary: Get plan by ID
      tags: [Plans]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Plan data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        404:
          description: Plan not found
    put:
      summary: Update a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanInput'
      responses:
        200:
          description: Plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error updating plan
        404:
          description: Plan not found
    delete:
      summary: Delete a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Plan deleted successfully
        404:
          description: Plan not found
  /plans/{id}/join:
    post:
      summary: Join a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Successfully joined the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error joining plan
        404:
          description: Plan not found
  /plans/{id}/leave:
    post:
      summary: Leave a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Successfully left the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error leaving plan
        404:
          description: Plan not found
  /plans/{id}/cancel:
    put:
      summary: Cancel a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Plan cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error cancelling plan
        404:
          description: Plan not found
  /plans/{planId}/admins/{userId}:
    post:
      summary: Add an admin to a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: planId
          schema:
            type: string
          required: true
          description: Plan ID
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        200:
          description: Admin added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error adding admin
        404:
          description: Plan or user not found
    delete:
      summary: Remove an admin from a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: planId
          schema:
            type: string
          required: true
          description: Plan ID
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID
      responses:
        200:
          description: Admin removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        400:
          description: Error removing admin
        404:
          description: Plan or user not found
  /plans/{planId}/is-admin:
    get:
      summary: Check if current user is admin of a plan
      tags: [Plans]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: planId
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: Admin status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAdmin:
                    type: boolean
        404:
          description: Plan not found
  /messages:
    get:
      summary: Get all messages
      tags: [Messages]
      responses:
        200:
          description: List of all messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Create a new message
      tags: [Messages]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        201:
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        400:
          description: Error creating message
  /messages/{planId}:
    get:
      summary: Get messages by plan ID
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: planId
          schema:
            type: string
          required: true
          description: Plan ID
      responses:
        200:
          description: List of messages for the plan
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        404:
          description: Plan not found
        403:
          description: Not a participant of the plan
  /reviews:
    get:
      summary: Get all reviews
      tags: [Reviews]
      responses:
        200:
          description: List of all reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    post:
      summary: Create a new review
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        201:
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: Error creating review
  /scraping/scrape:
    post:
      summary: Scrape events by city and country
      tags: [Scraping]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [city, country]
              properties:
                city:
                  type: string
                country:
                  type: string
      responses:
        200:
          description: List of scraped or existing events
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        400:
          description: City and country are required
        500:
          description: Error scraping the provided location
  /scraping/sources:
    get:
      summary: Get scraped sources
      tags: [Scraping]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
          required: false
          description: Filter by type
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: Limit number of results
        - in: query
          name: page
          schema:
            type: integer
          required: false
          description: Page number
      responses:
        200:
          description: Paginated list of sources
          content:
            application/json:
              schema:
                type: object
                properties:
                  sources:
                    type: array
                    items:
                      type: object
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
        500:
          description: Error fetching scraped sources 